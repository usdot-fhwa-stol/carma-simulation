<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2020 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	carma_src.launch

  The ros launch file for the CARMA 3 Platform ROS Network.
  Launches all the needed ros nodes and sets up the parameter server.
  Also sets up all static transforms used by tf2 within the system.

  Use:
  First delete the generated build/scripts folder in all java packages.
  roslaunch carma carma.launch
  After using source devel/setup.bash from workspace root.

  If not using simulated drivers they are activated using ros arguments as shown below.
  roslaunch carma carma.launch mock_drivers="can"
-->
<launch>

  <!-- Directory of vehicle config parameters -->
  <arg name="vehicle_config_dir" default="/opt/carma/vehicle/config" doc="The directory continaing vehicle config type parameters"/>
  <arg name="vehicle_calibration_dir" default="/opt/carma/vehicle/calibration" doc="The directory continaing vehicle calibration type parameters"/>
  
	<!-- Startup Drivers With Main CARMA System -->
  <arg name="launch_drivers" default="true" doc="True if drivers are to be launched with the CARMA Platform, overrides mock_drivers arg if false"/>

  <!-- Simulation Usage -->
  <arg name="mock_drivers" 
    default="controller gnss lidar"
    doc="List of driver node base names which will be launched as mock drivers"
  />

  <!-- Debug -->
  <!-- JVM Debug arguments -->
  <!-- JVM_DEBUG_OPTS: Start rosjava node with these JVM arguments for debugging -->
  <env name="JVM_DEBUG_OPTS" value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"/>
  <!-- Set to true to enable debugging on the specified node -->
  <arg name="debug_node" default="" doc="Set to the java node base name to enable debugging on that node"/>

  <!-- Logging -->
  <!-- C++ Logging -->
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find carma)/launch/log-config/roscpp_log.config"/>
  <!-- JVM Logging Options -->
  <arg name="log_config" default="$(find carma)/launch/log-config/log-config.properties" doc="The location of the logging configuration file"/>
  <arg name="JVM_LOG_OPTS" value="-Djava.util.logging.config.file=$(arg log_config)"/>
  <!-- Apply logging properties to all java nodes using JAVA_OPTS-->
  <env name="JAVA_OPTS" value="$(arg JVM_LOG_OPTS)"/>
  <!-- Generate log name configuration file -->
  <param name="log_name" type="str" command="$(find carma)/scripts/generate_log_name.sh"/>
  <!-- ROS Bag -->
  <arg name="use_rosbag" default="true" doc="Record a rosbag"/>
  
  <!-- Map files to load -->
  <arg name="arealist_path" default="arealist.txt" doc="Path to the arealist.txt file which contains the paths and dimensions of each map cell to load"/>
  <arg name="load_type" default="noupdate" doc="Enum of the map loading approach to use. Can be 'download', 'noupdate', or 'arealist'"/> 
  <arg name="single_pcd_path" default="/opt/carma/maps/pcd_map.pcd" doc="Path to the map pcd file if using the noupdate load type"/>
  <arg name="area" default="1x1" doc="Dimensions of the square of cells loaded at runtime using the download and arealist load types"/>
  <arg name="vector_map_file" default="/opt/carma/maps/vector_map.osm" doc="Path to the map osm file if using the noupdate load type"/>

  <!-- Route File Locations -->
  <arg name="route_file_folder" default="/opt/carma/routes/" doc="Path of folder containing routes to load"/>

  <!-- Load Vehicle Characteristics -->
  <rosparam command="load" file="$(arg vehicle_calibration_dir)/identifiers/UniqueVehicleParams.yaml"/>
  <rosparam command="load" file="$(arg vehicle_config_dir)/VehicleConfigParams.yaml"/>

  <!-- Hardware Interface Stack -->
  <group ns="$(env CARMA_INTR_NS)">
    <include file="$(find carma)/launch/hardware_interface.launch">
      <arg name="mock_drivers" value="$(arg mock_drivers)"/>
      <arg name="debug_node" value="$(arg debug_node)"/>
      <arg name="launch_drivers" value="$(arg launch_drivers)"/>
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
    </include>
  </group>

  <!-- Environment Perception Stack -->
  <group ns="$(env CARMA_ENV_NS)">
    <include file="$(find carla_ackermann_control_wrapper)/launch/environment.launch">
      <arg name="vector_map_file" value="$(arg vector_map_file)" />
      <arg name="vehicle_calibration_dir" value="$(arg vehicle_calibration_dir)"/>
    </include>
  </group>

  <!-- Guidance Stack -->
  <group ns="$(env CARMA_GUIDE_NS)">
    <!-- Health Monitor.
    Health monitor is required to launch with node tag here to correctly shut down
    other nodes through its required=true attribute-->
    <node pkg="health_monitor" type="health_monitor" name="health_monitor" required="true">
      <remap from="driver_discovery" to="$(optenv CARMA_INTR_NS)/driver_discovery"/>
      <remap from="system_alert" to="/system_alert"/>
      <remap from="~required_drivers" to="/required_drivers"/> 
      <remap from="~lidar_gps_drivers" to="/lidar_gps_drivers"/>
      <remap from="~truck" to="/truck"/>
      <remap from="~car" to="/car"/> 
      <rosparam command="load" file="$(find health_monitor)/config/params.yaml"/>
    </node>
    
    <include file="$(find carla_ackermann_control_wrapper)/launch/guidance.launch">
      <arg name="route_file_folder" value="$(arg route_file_folder)"/>
    </include>
  </group>

  <!-- UI Stack -->
  <group ns="$(env CARMA_UI_NS)">
    <include file="$(find carma)/launch/ui.launch"/>
  </group>

  <!-- TODO should there be a data collection launch file. Record Rosbag of all topics excluding /rosout and CAN messages since they may contain sensetive data -->
  <node pkg="rosbag" type="record" name="rosbag_node" args="record -o /opt/carma/logs/ --lz4 -a -x '/rosout(.*)|(.*)/received_messages|(.*)/sent_messages|(.*)/ds_fusion/(.*)|(.*)/scan'" if="$(arg use_rosbag)" />
</launch>
